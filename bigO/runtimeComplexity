// Big Os

// O(1) Constant – no loops
// O(log N) Logarithmic – usually searching algorithms have log n if they are sorted (Binary Search)
// O(n) Linear – for loops, while loops through n items
// O(n log(n)) Log Linear – usually sorting operations
// O(n^2) Quadratic – every element in a collection needs to be compared to ever other element. Two
// nested loops
// O(2^n) Exponential – recursive algorithms that solves a problem of size N
// O(n!) Factorial – you are adding a loop for every element
// Iterating through half a collection is still O(n)
// Two separate collections: O(a * b)


// • Different inputs should have different variables: O(a + b)
// • A and B arrays nested would be: O(a * b)




// Exercise
function funChallenge(input) {
  let a = 10;
  a = 50 + 3;

  for (let i = 0; i < input.length; i++) {
    anotherFunction();
    let stranger = true;
    a++;
  }
  return a;
}

 // runtime complexity is O(n)

function anotherFunChallenge(input) {
    let a = 5; // O(1)
    let b = 10; // O(1)
    let c = 50; // O(1)
    for (let i = 0; i < input; i++) { // O(n)
      let x = i + 1; // O(n)
      let y = i + 2; // O(n)
      let z = i + 3; // O(n)

    }
    for (let j = 0; j < input; j++) { // O(n)
      let p = j * 2; // O(n)
      let q = j * 2; // O(n) 
    }
    let whoAmI = "I don't know"; // O(1)
  }

  // runtime complexity is O(n)